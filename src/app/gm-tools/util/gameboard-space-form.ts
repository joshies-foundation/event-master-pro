import { computed, Signal, WritableSignal } from '@angular/core';
import {
  FormArray,
  FormBuilder,
  FormControl,
  Validators,
} from '@angular/forms';
import {
  FormField,
  FormFieldType,
} from '../../shared/ui/form-field/form-field.component';
import { confirmBackendAction } from '../../shared/util/dialog-helpers';
import {
  formValueSignal,
  ModelFormGroup,
} from '../../shared/util/form-helpers';
import { GameboardSpaceEffect } from '../../shared/util/supabase-helpers';
import { Form } from '../../shared/ui/form.component';
import { GameStateService } from '../../shared/data-access/game-state.service';
import { ActivatedRoute, Router } from '@angular/router';
import { ConfirmationService, MessageService } from 'primeng/api';
import { PostgrestSingleResponse } from '@supabase/supabase-js';
import {
  ChaosSpaceEventTemplateModel,
  GameboardSpaceEffectWithData,
  GameboardSpaceModel,
  OmitAutoGeneratedColumns,
  SpecialSpaceEventTemplateModel,
} from '../../shared/util/supabase-types';

export interface GameboardSpaceTypeForm {
  name: string;
  color: string;
  icon_class: string;
  effect: GameboardSpaceEffect;
  pointsGained: number;
  alternativeActivity: string;
  duelGames: string;
  specialSpaceEventTemplateIds: SpecialSpaceEventTemplateModel['id'][];
  chaosSpaceEventTemplateIds: ChaosSpaceEventTemplateModel['id'][];
}

export function gameboardSpaceFormFactory(
  saveMethod: (
    gameboardSpace: OmitAutoGeneratedColumns<GameboardSpaceModel>,
  ) => Promise<PostgrestSingleResponse<null>>,
  submitButtonText: (spaceName: string) => string,
  successText: (spaceName: string) => string,
  formBuilder: FormBuilder,
  submittingSignal: WritableSignal<boolean>,
  formDisabledSignal: Signal<boolean>,
  specialSpaceEventTemplates: Signal<
    SpecialSpaceEventTemplateModel[] | null | undefined
  >,
  chaosSpaceEventTemplates: Signal<
    ChaosSpaceEventTemplateModel[] | null | undefined
  >,
  confirmDialogKey: string,
  gameStateService: GameStateService,
  router: Router,
  activatedRoute: ActivatedRoute,
  confirmationService: ConfirmationService,
  messageService: MessageService,
): {
  gameboardSpaceForm: Form;
  gameboardSpaceFormGroup: ModelFormGroup<GameboardSpaceTypeForm>;
  gameboardSpaceFormValue: Signal<GameboardSpaceTypeForm>;
  gameboardSpaceName: Signal<string>;
  gameboardSpaceEffect: Signal<GameboardSpaceEffect>;
  gameboardSpacePreviewData: Signal<GameboardSpaceEffectWithData>;
} {
  const gameboardSpaceFormGroup: ModelFormGroup<GameboardSpaceTypeForm> =
    formBuilder.nonNullable.group({
      name: ['', Validators.required],
      color: ['var(--color-gray-600)', Validators.required],
      icon_class: 'pi pi-bolt',
      effect: [GameboardSpaceEffect.GainPoints, Validators.required],
      pointsGained: [0, Validators.required],
      alternativeActivity: '',
      duelGames: '',
      specialSpaceEventTemplateIds: [
        [] as SpecialSpaceEventTemplateModel['id'][],
      ],
      chaosSpaceEventTemplateIds: [[] as ChaosSpaceEventTemplateModel['id'][]],
    });

  const gameboardSpaceFormValue: Signal<GameboardSpaceTypeForm> =
    formValueSignal(gameboardSpaceFormGroup);

  const gameboardSpaceEffect: Signal<GameboardSpaceEffect> = computed(
    () => gameboardSpaceFormValue().effect,
  );

  const gameboardSpaceName: Signal<string> = computed(
    () => gameboardSpaceFormValue().name,
  );

  const gameboardSpacePreviewData: Signal<GameboardSpaceEffectWithData> =
    computed(
      (): GameboardSpaceEffectWithData =>
        getGameboardSpaceEffectWithData(gameboardSpaceFormValue()),
    );

  const gameboardSpaceForm = {
    formGroup: gameboardSpaceFormGroup,
    disabled: formDisabledSignal,
    fields: computed((): FormField[] => [
      {
        type: FormFieldType.Text,
        name: 'name',
        label: 'Name',
        placeholder: 'Blue',
        control: gameboardSpaceFormGroup.controls.name,
      },
      {
        type: FormFieldType.Dropdown,
        name: 'color',
        label: 'Color',
        placeholder: 'Color',
        options: [
          {
            label: 'Red',
            value: 'var(--color-red-600)',
          },
          {
            label: 'Orange',
            value: 'var(--color-orange-600)',
          },
          {
            label: 'Yellow',
            value: 'var(--color-yellow-600)',
          },
          {
            label: 'Green',
            value: 'var(--color-green-600)',
          },
          {
            label: 'Blue',
            value: 'var(--color-blue-500)',
          },
          {
            label: 'Purple',
            value: 'var(--color-purple-500)',
          },
          {
            label: 'Pink',
            value: 'var(--color-pink-500)',
          },
          {
            label: 'Teal',
            value: 'var(--color-teal-500)',
          },
          {
            label: 'Brown',
            value: 'var(--color-orange-900)',
          },
          {
            label: 'Gray',
            value: 'var(--color-gray-600)',
          },
          {
            label: 'Black',
            value: 'black',
          },
          {
            label: 'White',
            value: 'white',
          },
        ],
        control: gameboardSpaceFormGroup.controls.color,
      },
      {
        type: FormFieldType.Text,
        name: 'icon-class',
        label: 'Icon Class',
        placeholder: 'Eg: pi pi-bolt',
        control: gameboardSpaceFormGroup.controls.icon_class,
      },
      {
        type: FormFieldType.Dropdown,
        name: 'effect',
        label: 'Effect',
        placeholder: 'Effect',
        options: Object.values(GameboardSpaceEffect).map((effect) => ({
          label: effect
            .replace(/_/g, ' ')
            .replace(/\b\w/g, (char) => char.toUpperCase()),
          value: effect,
        })),
        control: gameboardSpaceFormGroup.controls.effect,
      },
      {
        type: FormFieldType.Number,
        name: 'points-gained',
        label: 'Number of Points Gained',
        required: [
          GameboardSpaceEffect.GainPoints,
          GameboardSpaceEffect.GainPointsOrDoActivity,
        ].includes(gameboardSpaceEffect()),
        visible: [
          GameboardSpaceEffect.GainPoints,
          GameboardSpaceEffect.GainPointsOrDoActivity,
        ].includes(gameboardSpaceEffect()),
        showButtons: true,
        control: gameboardSpaceFormGroup.controls.pointsGained,
      },
      {
        type: FormFieldType.Text,
        name: 'alternative-activity',
        label: 'Alternative Activity',
        required:
          gameboardSpaceEffect() ===
          GameboardSpaceEffect.GainPointsOrDoActivity,
        visible:
          gameboardSpaceEffect() ===
          GameboardSpaceEffect.GainPointsOrDoActivity,
        placeholder: 'Take a shot',
        control: gameboardSpaceFormGroup.controls.alternativeActivity,
      },
      {
        type: FormFieldType.TextArea,
        name: 'duel-games',
        label: 'Duel Games (1 per line)',
        required: gameboardSpaceEffect() === GameboardSpaceEffect.Duel,
        visible: gameboardSpaceEffect() === GameboardSpaceEffect.Duel,
        placeholder: 'Junk in the Trunk\nPing Pong\nRock-Paper-Scissors',
        control: gameboardSpaceFormGroup.controls.duelGames,
      },
      {
        control: gameboardSpaceFormGroup.controls.specialSpaceEventTemplateIds,
        type: FormFieldType.MultiSelect,
        name: 'special-space-events',
        label: 'Special Space Events',
        placeholder: 'Special Space Event',
        options: specialSpaceEventTemplates() ?? [],
        optionLabel: 'name',
        optionValue: 'id',
        required: gameboardSpaceEffect() === GameboardSpaceEffect.Special,
        visible: gameboardSpaceEffect() === GameboardSpaceEffect.Special,
      },
      {
        control: gameboardSpaceFormGroup.controls.chaosSpaceEventTemplateIds,
        type: FormFieldType.MultiSelect,
        name: 'chaos-space-events',
        label: 'Chaos Space Events',
        placeholder: 'Chaos Space Event',
        options: chaosSpaceEventTemplates() ?? [],
        optionLabel: 'name',
        optionValue: 'id',
        required: gameboardSpaceEffect() === GameboardSpaceEffect.Chaos,
        visible: gameboardSpaceEffect() === GameboardSpaceEffect.Chaos,
      },
      {
        type: FormFieldType.Submit,
        name: 'submit',
        label: submitButtonText(gameboardSpaceName()),
        loading: submittingSignal(),
        position: 'full',
      },
    ]),
    onSubmit: () =>
      confirmSubmit(
        gameboardSpaceFormValue(),
        gameStateService.sessionId()!,
        confirmDialogKey,
      ),
  };

  async function confirmSubmit(
    formValue: GameboardSpaceTypeForm,
    sessionId: number,
    confirmDialogKey: string,
  ) {
    const { name, color, icon_class, effect } = formValue;

    const { effect_data } = getGameboardSpaceEffectWithData(formValue);

    confirmBackendAction({
      action: () =>
        saveMethod({
          name,
          color,
          icon_class,
          session_id: sessionId,
          effect,
          effect_data,
        }),
      successMessageText: successText(name),
      successNavigation: '..',
      confirmDialogKey,
      submittingSignal,
      router: router,
      activatedRoute: activatedRoute,
      confirmationService: confirmationService,
      messageService: messageService,
    });
  }

  return {
    gameboardSpaceForm,
    gameboardSpaceFormGroup,
    gameboardSpaceFormValue,
    gameboardSpaceName,
    gameboardSpaceEffect,
    gameboardSpacePreviewData,
  };
}

function getGameboardSpaceEffectWithData(
  formValue: GameboardSpaceTypeForm,
): GameboardSpaceEffectWithData {
  const {
    effect,
    pointsGained,
    alternativeActivity,
    specialSpaceEventTemplateIds,
    chaosSpaceEventTemplateIds,
    duelGames,
  } = formValue;

  switch (effect) {
    case GameboardSpaceEffect.GainPoints:
      return {
        effect,
        effect_data: {
          pointsGained,
        },
      };

    case GameboardSpaceEffect.GainPointsOrDoActivity:
      return {
        effect,
        effect_data: {
          pointsGained,
          alternativeActivity,
        },
      };

    case GameboardSpaceEffect.Special:
      return {
        effect,
        effect_data: {
          specialSpaceEventTemplateIds,
        },
      };

    case GameboardSpaceEffect.Duel:
      return {
        effect,
        effect_data: {
          duelGames: duelGames!.split('\n'),
        },
      };

    case GameboardSpaceEffect.Chaos:
      return {
        effect,
        effect_data: {
          chaosSpaceEventTemplateIds,
        },
      };

    case GameboardSpaceEffect.Bank:
      return {
        effect,
        effect_data: null,
      };
  }
}

export function createFormControl<T>(
  formBuilder: FormBuilder,
  obj: T,
): FormControl<T> {
  return formBuilder.nonNullable.control(obj);
}

export function createFormGroup<T extends object>(
  formBuilder: FormBuilder,
  obj: T,
): ModelFormGroup<T> {
  // @ts-expect-error: typescript doesn't like this for some reason, but it works
  return formBuilder.nonNullable.group(
    Object.entries(obj).reduce(
      (prev, [fieldName, initialValue]) => ({
        ...prev,
        [fieldName]:
          typeof initialValue === 'object' && initialValue !== null
            ? createFormGroup(formBuilder, initialValue)
            : Array.isArray(initialValue)
              ? createFormArray(formBuilder, initialValue)
              : createFormControl(formBuilder, initialValue),
      }),
      {},
    ),
  );
}

export function createFormArray<T>(
  formBuilder: FormBuilder,
  arr: T[],
): FormArray<ModelFormGroup<T>> {
  // @ts-expect-error: typescript doesn't like this for some reason, but it works
  return formBuilder.nonNullable.array(
    arr.map((element) =>
      typeof element === 'object' && element !== null
        ? createFormGroup(formBuilder, element)
        : Array.isArray(element)
          ? createFormArray(formBuilder, element)
          : createFormControl(formBuilder, element),
    ),
  );
}
