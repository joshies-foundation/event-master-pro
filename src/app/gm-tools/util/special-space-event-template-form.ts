import { computed, Signal, WritableSignal } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import {
  FormField,
  FormFieldType,
} from '../../shared/ui/form-field/form-field.component';
import { confirmBackendAction } from '../../shared/util/dialog-helpers';
import {
  formValueSignal,
  ModelFormGroup,
} from '../../shared/util/form-helpers';
import { Form } from '../../shared/ui/form.component';
import { GameStateService } from '../../shared/data-access/game-state.service';
import { ActivatedRoute, Router } from '@angular/router';
import { ConfirmationService, MessageService } from 'primeng/api';
import { PostgrestSingleResponse } from '@supabase/supabase-js';
import {
  OmitAutoGeneratedColumns,
  SpecialSpaceEventDetails,
  SpecialSpaceEventTemplateModel,
  SpecialSpaceEventType,
} from '../../shared/util/supabase-types';

export interface SpecialSpaceEventTemplateForm {
  name: string;
  description: string;
  type: SpecialSpaceEventType;
  lastPlacePoints: number;
  pointsLabelPlural: string;
  pointsLabelSingular: string;
  sessionPointsPerGamePoint: number;
}

export function specialSpaceEventTemplateFormFactory(
  saveMethod: (
    specialSpaceEventTemplate: OmitAutoGeneratedColumns<SpecialSpaceEventTemplateModel>,
  ) => Promise<PostgrestSingleResponse<null>>,
  submitButtonText: (spaceName: string) => string,
  successText: (spaceName: string) => string,
  formBuilder: FormBuilder,
  submittingSignal: WritableSignal<boolean>,
  formDisabledSignal: Signal<boolean>,
  confirmDialogKey: string,
  gameStateService: GameStateService,
  router: Router,
  activatedRoute: ActivatedRoute,
  confirmationService: ConfirmationService,
  messageService: MessageService,
): {
  specialSpaceEventTemplateForm: Form;
  specialSpaceEventTemplateFormGroup: ModelFormGroup<SpecialSpaceEventTemplateForm>;
  specialSpaceEventTemplateFormValue: Signal<SpecialSpaceEventTemplateForm>;
  specialSpaceEventTemplateName: Signal<string>;
  specialSpaceEventType: Signal<SpecialSpaceEventType>;
} {
  const specialSpaceEventTemplateFormGroup: ModelFormGroup<SpecialSpaceEventTemplateForm> =
    formBuilder.nonNullable.group({
      name: ['', Validators.required],
      description: ['', Validators.required],
      type: [
        SpecialSpaceEventType.PlayerGainsPointsBasedOnGameScore as SpecialSpaceEventType,
        Validators.required,
      ],
      lastPlacePoints: [24, Validators.min(1)],
      pointsLabelPlural: '',
      pointsLabelSingular: '',
      sessionPointsPerGamePoint: 1,
    });

  const { controls } = specialSpaceEventTemplateFormGroup;

  const specialSpaceEventTemplateFormValue: Signal<SpecialSpaceEventTemplateForm> =
    formValueSignal(specialSpaceEventTemplateFormGroup);

  const specialSpaceEventType: Signal<SpecialSpaceEventType> = computed(
    () => specialSpaceEventTemplateFormValue().type,
  );

  const specialSpaceEventTemplateName: Signal<string> = computed(
    () => specialSpaceEventTemplateFormValue().name,
  );

  const specialSpaceEventTemplatePointsLabelSingular: Signal<string> = computed(
    () => specialSpaceEventTemplateFormValue().pointsLabelSingular ?? '',
  );

  const specialSpaceEventTemplateForm = {
    formGroup: specialSpaceEventTemplateFormGroup,
    disabled: formDisabledSignal,
    fields: computed((): FormField[] => [
      {
        control: controls.name,
        type: FormFieldType.Text,
        name: 'name',
        label: 'Name',
        placeholder: 'Name',
      },
      {
        control: controls.description,
        type: FormFieldType.TextArea,
        name: 'description',
        label: 'Description',
        placeholder: 'Description',
      },
      {
        control: controls.type,
        type: FormFieldType.Dropdown,
        name: 'type',
        label: 'Type',
        placeholder: 'Type',
        disabled:
          controls.type.value ===
          SpecialSpaceEventType.EveryoneGainsPointsBasedOnRank,
        options: Object.values(SpecialSpaceEventType).map(
          (specialSpaceEventType) => ({
            label: specialSpaceEventType
              .replace(/_/g, ' ')
              .replace(/\b\w/g, (char) => char.toUpperCase()),
            value: specialSpaceEventType,
            disabled:
              specialSpaceEventType ===
              SpecialSpaceEventType.EveryoneGainsPointsBasedOnRank,
          }),
        ),
      },
      {
        control: controls.lastPlacePoints,
        type: FormFieldType.Number,
        name: 'last-place-points',
        label: 'Number of Points Last Place Player Receives',
        min: 1,
        required:
          controls.type.value ===
          SpecialSpaceEventType.EveryoneGainsPointsBasedOnRank,
        visible:
          controls.type.value ===
          SpecialSpaceEventType.EveryoneGainsPointsBasedOnRank,
      },
      {
        control: controls.pointsLabelPlural,
        type: FormFieldType.Text,
        name: 'points-label-plural',
        label: 'Points Label Plural',
        placeholder: 'successful flips',
        required:
          specialSpaceEventType() ===
          SpecialSpaceEventType.PlayerGainsPointsBasedOnGameScore,
        visible:
          specialSpaceEventType() ===
          SpecialSpaceEventType.PlayerGainsPointsBasedOnGameScore,
      },
      {
        control: controls.pointsLabelSingular,
        type: FormFieldType.Text,
        name: 'points-label-singular',
        label: 'Points Label Singular',
        placeholder: 'successful animate-flip',
        required:
          specialSpaceEventType() ===
          SpecialSpaceEventType.PlayerGainsPointsBasedOnGameScore,
        visible:
          specialSpaceEventType() ===
          SpecialSpaceEventType.PlayerGainsPointsBasedOnGameScore,
      },
      {
        control: controls.sessionPointsPerGamePoint,
        type: FormFieldType.Number,
        name: 'last-place-points',
        label: `Number of Session Points Earned Per ${specialSpaceEventTemplatePointsLabelSingular().replace(/\b\w/g, (char) => char.toUpperCase())}`,
        min: 0,
        allowDecimals: true,
        required:
          specialSpaceEventType() ===
          SpecialSpaceEventType.PlayerGainsPointsBasedOnGameScore,
        visible:
          specialSpaceEventType() ===
          SpecialSpaceEventType.PlayerGainsPointsBasedOnGameScore,
      },
      {
        type: FormFieldType.Submit,
        name: 'submit',
        label: submitButtonText(specialSpaceEventTemplateName()),
        loading: submittingSignal(),
        position: 'full',
      },
    ]),
    onSubmit: () =>
      confirmSubmit(
        specialSpaceEventTemplateFormValue(),
        gameStateService.sessionId()!,
        confirmDialogKey,
      ),
  };

  async function confirmSubmit(
    formValue: SpecialSpaceEventTemplateForm,
    sessionId: number,
    confirmDialogKey: string,
  ) {
    const { name, description, type } = formValue;

    const details = getSpecialSpaceEventTemplateDetails(formValue);

    confirmBackendAction({
      action: () =>
        saveMethod({
          name,
          description,
          type,
          session_id: sessionId,
          details,
        }),
      successMessageText: successText(name),
      successNavigation: '..',
      confirmDialogKey,
      submittingSignal,
      router: router,
      activatedRoute: activatedRoute,
      confirmationService: confirmationService,
      messageService: messageService,
    });
  }

  return {
    specialSpaceEventTemplateForm,
    specialSpaceEventTemplateFormGroup,
    specialSpaceEventTemplateFormValue,
    specialSpaceEventTemplateName,
    specialSpaceEventType,
  };
}

function getSpecialSpaceEventTemplateDetails<
  T extends SpecialSpaceEventType = SpecialSpaceEventType,
>(formValue: SpecialSpaceEventTemplateForm): SpecialSpaceEventDetails<T> {
  const {
    type,
    lastPlacePoints,
    pointsLabelPlural,
    pointsLabelSingular,
    sessionPointsPerGamePoint,
  } = formValue;

  switch (type) {
    case SpecialSpaceEventType.EveryoneGainsPointsBasedOnRank:
      return {
        lastPlacePoints,
      } as SpecialSpaceEventDetails<T>;

    case SpecialSpaceEventType.PlayerGainsPointsBasedOnGameScore:
      return {
        pointsLabelPlural,
        pointsLabelSingular,
        sessionPointsPerGamePoint,
      } as SpecialSpaceEventDetails<T>;
  }
}
